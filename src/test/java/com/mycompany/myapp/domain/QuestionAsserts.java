package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuestionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllPropertiesEquals(Question expected, Question actual) {
        assertQuestionAutoGeneratedPropertiesEquals(expected, actual);
        assertQuestionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAllUpdatablePropertiesEquals(Question expected, Question actual) {
        assertQuestionUpdatableFieldsEquals(expected, actual);
        assertQuestionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionAutoGeneratedPropertiesEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableFieldsEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDifficulty()).as("check difficulty").isEqualTo(actual.getDifficulty()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getTestCases()).as("check testCases").isEqualTo(actual.getTestCases()))
            .satisfies(e -> assertThat(e.getMaxScore()).as("check maxScore").isEqualTo(actual.getMaxScore()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuestionUpdatableRelationshipsEquals(Question expected, Question actual) {
        assertThat(expected)
            .as("Verify Question relationships")
            .satisfies(e -> assertThat(e.getStudentClass()).as("check studentClass").isEqualTo(actual.getStudentClass()));
    }
}
